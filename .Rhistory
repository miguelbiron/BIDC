install.packages("roxygen2")
library(BIDC)
setwd('~/projects/MHwGibbs_rho_inf')
S = 1000L # number of MH-within-Gibbs samples per chain
set.seed(1313)
S = 1000L # number of MH-within-Gibbs samples per chain
set.seed(1313)
# parameters for simulated data
N = 1000L # number of individuals
Tau = 100L # time steps
rho = 0.15 # default correlation
median_pd = 0.25 # median marginal probability of default
a = 0.9 # AR(1) param for M_t process
# load function for sampling data
source("./R/sample_data.R")
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
y = l_data$y; p_c = l_data$p_c; rm(l_data)
# one chain
chain = MH_w_Gibbs_iter(S=S, y=y, p_c=p_c, verbose = TRUE)
pd
library(BIDC)
library(BIDC)
# load function for sampling data
source("./R/sample_data.R")
# parameters for simulated data
N = 1000L # number of individuals
Tau = 100L # time steps
rho = 0.15 # default correlation
median_pd = 0.25 # median marginal probability of default
a = 0.9 # AR(1) param for M_t process
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
str(l_data)
hist(l_data$p_c)
sample_data = function(N, Tau, rho, median_pd, a){
# N: number of individuals
# Tau: time steps
# rho: default correlation
# median_pd: median marginal probability of default
# a: AR(1) param for M_t process
# output: list with: y  : matrix size N \times Tau of integers in (0,1)
#                    x_c: matrix size N \times Tau of critical values
# sample M_t process
M = numeric(Tau)
M[1L] = rnorm(1L)
for(tau in 2L:Tau) M[tau] = a*M[tau-1L] + sqrt(1-a^2)*rnorm(1L)
# sample critical values
x_c = matrix(rnorm(N*Tau, mean = qnorm(median_pd)),
nrow = N)
p_c = pnorm(x_c) # probit to get probabilities
# sample y_it
y = matrix(NA_integer_, nrow = N, ncol = Tau)
for(tau in 1L:Tau) {
prob = pnorm((x_c[,tau]-sqrt(rho)*M[tau])/sqrt(1-rho))
y[,tau] = 1L*(runif(N) <= prob)
}
return(list(y=y,p_c=p_c))
}
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
str(l_data)
mean(l_data$y)
hist(l_data$p_c)
median(l_data$p_c)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_c=l_data$p_d, verbose = FALSE)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = FALSE)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = FALSE)
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
sample_data = function(N, Tau, rho, median_pd, a){
# N: number of individuals
# Tau: time steps
# rho: default correlation
# median_pd: median marginal probability of default
# a: AR(1) param for M_t process
# output: list with: y  : matrix size N \times Tau of integers in (0,1)
#                    x_c: matrix size N \times Tau of critical values
# sample M_t process
M = numeric(Tau)
M[1L] = rnorm(1L)
for(tau in 2L:Tau) M[tau] = a*M[tau-1L] + sqrt(1-a^2)*rnorm(1L)
# sample critical values
x_c = matrix(rnorm(N*Tau, mean = qnorm(median_pd)),
nrow = N)
# sample y_it
y = matrix(NA_integer_, nrow = N, ncol = Tau)
for(tau in 1L:Tau) {
prob = pnorm((x_c[,tau]-sqrt(rho)*M[tau])/sqrt(1-rho))
y[,tau] = 1L*(runif(N) <= prob)
}
p_d = pnorm(x_c) # probit to get probabilities
return(list(y=y,p_d=p_d))
}
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = FALSE)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = TRUE)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = TRUE)
?bidc_pd
library(BIDC)
?bidc_pd
?anova
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
?bidc_pd
library(dplyr)
library(tidyr)
library(ggplot2)
chain[,c(1L, Tau, Tau+1L)] %>%
as.data.frame() %>%
setNames(c("M_1", "M_tau", "rho")) %>%
mutate(s = seq_len(nrow(.))) %>%
gather(select = -"s") %>%
ggplot(aes(x = s, y = value, colour = key)) +
geom_line() +
facet_wrap(~key, scales = "free_y")
chain[,c(1L, Tau, Tau+1L)] %>%
as.data.frame() %>%
setNames(c("M_1", "M_tau", "rho")) %>%
mutate(s = seq_len(nrow(.))) %>%
gather(select = -"s") %>%
ggplot(aes(x = s, y = value, colour = key)) +
geom_line(show.legend = FALSE) +
facet_wrap(~key, scales = "free_y", ncol = 1L)
chain[,c(1L, Tau, Tau+1L)] %>%
as.data.frame() %>%
setNames(c("M_1", paste0("M_", Tau), "rho")) %>%
mutate(s = seq_len(nrow(.))) %>%
gather(select = -"s") %>%
ggplot(aes(x = s, y = value, colour = key)) +
geom_line(show.legend = FALSE) +
facet_wrap(~key, scales = "free_y", ncol = 1L)
chain = chain[-(1L:(S %/% 2L)),] # remove first half of chain
hist(chain[,Tau+1L])
chain[,-(Tau+1L)] %>%
as_tibble() %>%
setNames(1L:ncol(.)) %>%
mutate(s=1L:nrow(.)) %>%
gather("tau", "M", select = -s) %>%
mutate(tau=as.integer(tau)) %>%
group_by(tau) %>%
summarise(qtiles = list(data.frame(
q   = c(".025", ".975"),
val = quantile(M, c(0.025, 0.975)),
stringsAsFactors = FALSE
))) %>%
ungroup() %>%
unnest() %>%
spread(q, val) %>%
ggplot(aes(x=tau, ymin=`.025`, ymax=`.975`)) +
geom_ribbon() +
theme_bw() +
labs(x = "Time",
y = "95% posterior band for M_t")
chain[,-(Tau+1L)] %>%
as_tibble() %>%
setNames(1L:ncol(.)) %>%
mutate(s=1L:nrow(.)) %>%
gather("tau", "M", select = -s) %>%
mutate(tau=as.integer(tau)) %>%
group_by(tau) %>%
summarise(qtiles = list(data.frame(
q   = c(".025", ".975"),
val = quantile(M, c(0.025, 0.975)),
stringsAsFactors = FALSE
))) %>%
ungroup() %>%
unnest() %>%
spread(q, val) %>%
ggplot(aes(x=tau, ymin=`.025`, ymax=`.975`)) +
geom_ribbon() +
labs(x = "Time",
y = "95% posterior band for M_t")
chain[,-(Tau+1L)] %>%
as_tibble() %>%
setNames(1L:ncol(.)) %>%
mutate(s=1L:nrow(.)) %>%
gather("tau", "M", select = -s) %>%
mutate(tau=as.integer(tau)) %>%
group_by(tau) %>%
summarise(qtiles = list(data.frame(
q   = c(".025", ".975"),
val = quantile(M, c(0.025, 0.975)),
stringsAsFactors = FALSE
))) %>%
ungroup() %>%
unnest() %>%
spread(q, val) %>%
ggplot(aes(x=tau, ymin=`.025`, ymax=`.975`, fill = "1")) +
geom_ribbon(show.legend = FALSE) +
labs(x = "Time",
y = "95% posterior band for M_t")
max(1, 2, 3, 4)
library(BIDC)
library(BIDC)
library(dplyr)
library(tidyr)
library(ggplot2)
###############################################################################
# parameters
###############################################################################
S = 1000L # number of MH-within-Gibbs samples per chain
set.seed(1313)
###############################################################################
# get simulated data
###############################################################################
# load function for sampling data
source("./R/sample_data.R")
# parameters for simulated data
N = 1000L # number of individuals
Tau = 100L # time steps
rho = 0.15 # default correlation
median_pd = 0.25 # median marginal probability of default
a = 0.9 # AR(1) param for M_t process
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
sample_data = function(N, Tau, rho, median_pd, a){
# N: number of individuals
# Tau: time steps
# rho: default correlation
# median_pd: median marginal probability of default
# a: AR(1) param for M_t process
# output: list with: y  : matrix size N \times Tau of integers in (0,1)
#                    x_c: matrix size N \times Tau of critical values
# sample M_t process
M = numeric(Tau)
M[1L] = rnorm(1L)
for(tau in 2L:Tau) M[tau] = a*M[tau-1L] + sqrt(1-a^2)*rnorm(1L)
# sample critical values
x_c = matrix(rnorm(N*Tau, mean = qnorm(median_pd)),
nrow = N)
# sample y_it
y = matrix(NA_integer_, nrow = N, ncol = Tau)
for(tau in 1L:Tau) {
prob = pnorm((x_c[,tau]-sqrt(rho)*M[tau])/sqrt(1-rho))
y[,tau] = 1L*(runif(N) <= prob)
}
p_d = pnorm(x_c) # probit to get probabilities
return(list(y=y,p_d=p_d))
}
###############################################################################
# get simulated data
###############################################################################
# get data
l_data = sample_data(N=N,Tau=Tau,rho=rho,median_pd=median_pd,a=a)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
is.na(c(1, NA))
is.na(1, NA)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
chain[,c(1L, Tau, Tau+1L)] %>%
as.data.frame() %>%
setNames(c("M_1", paste0("M_", Tau), "rho")) %>%
mutate(s = seq_len(nrow(.))) %>%
gather(select = -"s") %>%
ggplot(aes(x = s, y = value, colour = key)) +
geom_line(show.legend = FALSE) +
facet_wrap(~key, scales = "free_y", ncol = 1L)
library(BIDC)
# one chain
chain = bidc_pd(S=S, y=l_data$y, p_d=l_data$p_d, verbose = 1L)
chain[,c(1L, Tau, Tau+1L)] %>%
as.data.frame() %>%
setNames(c("M_1", paste0("M_", Tau), "rho")) %>%
mutate(s = seq_len(nrow(.))) %>%
gather(select = -"s") %>%
ggplot(aes(x = s, y = value, colour = key)) +
geom_line(show.legend = FALSE) +
facet_wrap(~key, scales = "free_y", ncol = 1L)
chain[,-(Tau+1L)] %>%
as_tibble() %>%
setNames(1L:ncol(.)) %>%
mutate(s=1L:nrow(.)) %>%
gather("tau", "M", select = -s) %>%
mutate(tau=as.integer(tau)) %>%
group_by(tau) %>%
summarise(qtiles = list(data.frame(
q   = c(".025", ".975"),
val = quantile(M, c(0.025, 0.975)),
stringsAsFactors = FALSE
))) %>%
ungroup() %>%
unnest() %>%
spread(q, val) %>%
ggplot(aes(x=tau, ymin=`.025`, ymax=`.975`, fill = "1")) +
geom_ribbon(show.legend = FALSE) +
labs(x = "Time",
y = "95% posterior band for M_t")
getwd()
